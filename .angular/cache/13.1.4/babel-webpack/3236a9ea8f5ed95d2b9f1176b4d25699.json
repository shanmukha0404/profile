{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.randomInsideCircle = exports.randomInsideRect = exports.randomUnitVector = exports.pick = exports.randomRange = void 0;\n\nvar components_1 = require(\"../components\");\n\nvar math_1 = require(\"./math\");\n/**\r\n * Returns a random value from min to max.\r\n */\n\n\nfunction randomRange(min, max) {\n  if (min === void 0) {\n    min = 0;\n  }\n\n  if (max === void 0) {\n    max = 1;\n  }\n\n  return math_1.lerp(min, max, Math.random());\n}\n\nexports.randomRange = randomRange;\n/**\r\n * Picks a random element from the specified array. Returns undefined if the array is empty.\r\n */\n\nfunction pick(arr) {\n  return arr.length === 0 ? undefined : arr[Math.floor(Math.random() * arr.length)];\n}\n\nexports.pick = pick;\n/**\r\n * Returns a random unit vector.\r\n */\n\nfunction randomUnitVector() {\n  var theta = randomRange(0, 2 * Math.PI);\n  var z = randomRange(-1, 1);\n  return new components_1.Vector(Math.sqrt(1 - z * z) * Math.cos(theta), Math.sqrt(1 - z * z) * Math.sin(theta), z);\n}\n\nexports.randomUnitVector = randomUnitVector;\n/**\r\n * Returns a random point inside the given rect.\r\n */\n\nfunction randomInsideRect(rect) {\n  return new components_1.Vector(rect.x + randomRange(0, rect.width), rect.y + randomRange(0, rect.height));\n}\n\nexports.randomInsideRect = randomInsideRect;\n\nfunction randomInsideCircle(circle) {\n  var theta = randomRange(0, 2 * Math.PI);\n  var radius = randomRange(0, circle.radius);\n  return new components_1.Vector(circle.x + Math.cos(theta) * radius, circle.y + Math.sin(theta) * radius);\n}\n\nexports.randomInsideCircle = randomInsideCircle;","map":null,"metadata":{},"sourceType":"script"}