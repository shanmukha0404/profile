{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.rotationToNormal = void 0;\n\nvar components_1 = require(\"../components\");\n\nvar math_1 = require(\"../systems/math\");\n/**\r\n * Converts the specified euler rotation (in degrees) into the corresponding normal vector.\r\n *\r\n * @remarks\r\n * The normal is calculated by placing a (figurative) plane in a coordinate-system's\r\n * origin, and rotating it by the specified angles. Note that the z-component of the\r\n * rotation is irrelevant for the normal and can be ignored. Then, two vectors\r\n * describing the orientation of the plane are calculated. Their cross product\r\n * denotes the normal vector.\r\n *\r\n * @param rotation The euler rotation angles (in degrees) to calculate the normal for.\r\n */\n\n\nfunction rotationToNormal(rotation) {\n  var alpha = rotation.x * math_1.deg2rad;\n  var beta = rotation.y * math_1.deg2rad;\n  var a = new components_1.Vector(Math.cos(beta), 0, Math.sin(beta));\n  var b = new components_1.Vector(0, Math.cos(alpha), Math.sin(alpha));\n  return a.cross(b);\n}\n\nexports.rotationToNormal = rotationToNormal;","map":null,"metadata":{},"sourceType":"script"}