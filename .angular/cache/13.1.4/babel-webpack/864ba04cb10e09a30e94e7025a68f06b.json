{"ast":null,"code":"\"use strict\";\n\nvar __spreadArray = this && this.__spreadArray || function (to, from) {\n  for (var i = 0, il = from.length, j = to.length; i < il; i++, j++) to[j] = from[i];\n\n  return to;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Vector = void 0;\n\nvar math_1 = require(\"../systems/math\");\n/**\r\n * Represents a structure used to process vectors.\r\n *\r\n * @remarks\r\n * Note that the operations in this class will **not** modify the original vector,\r\n * except for the property assignments. This is to ensure that vectors are not\r\n * unintentionally modified.\r\n *\r\n * @example\r\n * ```ts\r\n * const vectorA = new Vector(1, 3, 5);\r\n * const vectorB = new Vector(2, 3, 1);\r\n * const vectorC = vectorA.add(vectorB); // (3, 6, 6)\r\n * ```\r\n */\n\n\nvar Vector =\n/** @class */\nfunction () {\n  /**\r\n   * Creates a new vector with optional x-, y-, and z-components.\r\n   * Omitted components are defaulted to 0.\r\n   */\n  function Vector(x, y, z) {\n    if (x === void 0) {\n      x = 0;\n    }\n\n    if (y === void 0) {\n      y = 0;\n    }\n\n    if (z === void 0) {\n      z = 0;\n    }\n\n    this.values = new Float32Array(3);\n    this.xyz = [x, y, z];\n  }\n\n  Object.defineProperty(Vector.prototype, \"x\", {\n    /**\r\n     * Returns the x-component of the vector.\r\n     */\n    get: function () {\n      return this.values[0];\n    },\n\n    /**\r\n     * Modifies the x-component of the vector.\r\n     */\n    set: function (value) {\n      this.values[0] = value;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Vector.prototype, \"y\", {\n    /**\r\n     * Returns the y-component of the vector.\r\n     */\n    get: function () {\n      return this.values[1];\n    },\n\n    /**\r\n     * Modifies the y-component of the vector.\r\n     */\n    set: function (value) {\n      this.values[1] = value;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Vector.prototype, \"z\", {\n    /**\r\n     * Returns the z-component of the vector.\r\n     */\n    get: function () {\n      return this.values[2];\n    },\n\n    /**\r\n     * Modifies the z-component of the vector.\r\n     */\n    set: function (value) {\n      this.values[2] = value;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Vector.prototype, \"xyz\", {\n    /**\r\n     * Returns the xyz-components of the vector, bundled as a copied array.\r\n     */\n    get: function () {\n      return [this.x, this.y, this.z];\n    },\n\n    /**\r\n     * Simultaneously updates the xyz-components of the vector, by passing an array.\r\n     */\n    set: function (values) {\n      this.values[0] = values[0];\n      this.values[1] = values[1];\n      this.values[2] = values[2];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Returns the length of the vector.\r\n   */\n\n  Vector.prototype.magnitude = function () {\n    return Math.sqrt(this.sqrMagnitude());\n  };\n  /**\r\n   * Returns the squared length of the vector.\r\n   */\n\n\n  Vector.prototype.sqrMagnitude = function () {\n    return this.x * this.x + this.y * this.y + this.z * this.z;\n  };\n  /**\r\n   * Adds the two vectors together, component-wise.\r\n   */\n\n\n  Vector.prototype.add = function (vector) {\n    return new Vector(this.x + vector.x, this.y + vector.y, this.z + vector.z);\n  };\n  /**\r\n   * Subtracts the right vector from the left one, component-wise.\r\n   */\n\n\n  Vector.prototype.subtract = function (vector) {\n    return new Vector(this.x - vector.x, this.y - vector.y, this.z - vector.z);\n  };\n  /**\r\n   * Scales the lefthand vector by another vector or by a number.\r\n   */\n\n\n  Vector.prototype.scale = function (scalar) {\n    if (typeof scalar === \"number\") {\n      return new Vector(this.x * scalar, this.y * scalar, this.z * scalar);\n    } else {\n      return new Vector(this.x * scalar.x, this.y * scalar.y, this.z * scalar.z);\n    }\n  };\n  /**\r\n   * Normalizes the vector to a length of 1. If the length was previously zero,\r\n   * then a zero-length vector will be returned.\r\n   */\n\n\n  Vector.prototype.normalized = function () {\n    var magnitude = this.magnitude();\n\n    if (magnitude !== 0) {\n      return this.scale(1 / magnitude);\n    }\n\n    return new (Vector.bind.apply(Vector, __spreadArray([void 0], this.xyz)))();\n  };\n  /**\r\n   * Returns the angle between two vectors, in degrees.\r\n   */\n\n\n  Vector.prototype.angle = function (vector) {\n    return math_1.rad2deg * Math.acos((this.x * vector.x + this.y * vector.y + this.z * vector.z) / (this.magnitude() * vector.magnitude()));\n  };\n  /**\r\n   * Returns the cross-product of two vectors.\r\n   */\n\n\n  Vector.prototype.cross = function (vector) {\n    return new Vector(this.y * vector.z - this.z * vector.y, this.z * vector.x - this.x * vector.z, this.x * vector.y - this.y * vector.x);\n  };\n  /**\r\n   * returns the dot-product of two vectors.\r\n   */\n\n\n  Vector.prototype.dot = function (vector) {\n    return this.magnitude() * vector.magnitude() * Math.cos(math_1.deg2rad * this.angle(vector));\n  };\n  /**\r\n   * Returns a formatted representation of the vector.\r\n   */\n\n\n  Vector.prototype.toString = function () {\n    return \"Vector(\" + this.values.join(\", \") + \")\";\n  };\n  /**\r\n   * Creates a new vector from an angle, in degrees. Note that the z-component will be zero.\r\n   */\n\n\n  Vector.from2dAngle = function (angle) {\n    return new Vector(Math.cos(angle * math_1.deg2rad), Math.sin(angle * math_1.deg2rad));\n  };\n  /**\r\n   * Returns (0, 0, 0).\r\n   */\n\n\n  Vector.zero = new Vector(0, 0, 0);\n  /**\r\n   * Returns (1, 1, 1).\r\n   */\n\n  Vector.one = new Vector(1, 1, 1);\n  /**\r\n   * Returns (1, 0, 0).\r\n   */\n\n  Vector.right = new Vector(1, 0, 0);\n  /**\r\n   * Returns (0, 1, 0).\r\n   */\n\n  Vector.up = new Vector(0, 1, 0);\n  /**\r\n   * Returns (0, 0, 1).\r\n   */\n\n  Vector.forward = new Vector(0, 0, 1);\n  return Vector;\n}();\n\nexports.Vector = Vector;","map":null,"metadata":{},"sourceType":"script"}