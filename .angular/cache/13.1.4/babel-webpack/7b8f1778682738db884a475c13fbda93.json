{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.approximately = exports.clamp = exports.invlerp = exports.slerp = exports.lerp = exports.epsilon = exports.rad2deg = exports.deg2rad = void 0;\n/**\r\n * Constant coefficient to convert degrees to radians.\r\n */\n\nexports.deg2rad = Math.PI / 180;\n/**\r\n * Constant coefficient to convert radians to degrees.\r\n */\n\nexports.rad2deg = 180 / Math.PI;\n/**\r\n * A small value to approximately compare values.\r\n */\n\nexports.epsilon = 0.000001;\n/**\r\n * Linearly interpolates between a and b by t.\r\n */\n\nfunction lerp(a, b, t) {\n  return (1 - t) * a + t * b;\n}\n\nexports.lerp = lerp;\n/**\r\n * Smoothly interpolates between a and b by t (using cosine interpolation).\r\n */\n\nfunction slerp(a, b, t) {\n  return lerp(a, b, (1 - Math.cos(t * Math.PI)) / 2);\n}\n\nexports.slerp = slerp;\n/**\r\n * Inversely lerps v between a and b to find t.\r\n */\n\nfunction invlerp(a, b, v) {\n  return (v - a) / (b - a);\n}\n\nexports.invlerp = invlerp;\n/**\r\n * Clamps the specified value between a minimum and a maximum.\r\n */\n\nfunction clamp(value, min, max) {\n  return Math.min(max, Math.max(min, value));\n}\n\nexports.clamp = clamp;\n/**\r\n * Checks if a is approximately equal to b.\r\n */\n\nfunction approximately(a, b) {\n  return Math.abs(a - b) < exports.epsilon;\n}\n\nexports.approximately = approximately;","map":null,"metadata":{},"sourceType":"script"}