{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Lazy = void 0;\n/**\r\n * A wrapper class to lazily initialize a value.\r\n * Supports custom factory and predicate methods.\r\n */\n\nvar Lazy =\n/** @class */\nfunction () {\n  function Lazy(factory, exists) {\n    if (exists === void 0) {\n      exists = Lazy.defaultExists;\n    }\n\n    this.factory = factory;\n    this.exists = exists;\n  }\n\n  Object.defineProperty(Lazy.prototype, \"current\", {\n    /**\r\n     * The current value of the lazy object. Will be initialized, if the 'exists'\r\n     * predicate doesn't match.\r\n     */\n    get: function () {\n      if (!this.exists(this.value)) {\n        this.value = this.factory();\n      }\n\n      return this.value;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  Lazy.defaultExists = function (value) {\n    return typeof value !== \"undefined\";\n  };\n\n  return Lazy;\n}();\n\nexports.Lazy = Lazy;","map":null,"metadata":{},"sourceType":"script"}