{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __spreadArray = this && this.__spreadArray || function (to, from) {\n  for (var i = 0, il = from.length, j = to.length; i < il; i++, j++) to[j] = from[i];\n\n  return to;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Gradient = void 0;\n\nvar spline_1 = require(\"./spline\");\n/**\r\n * Represents a gradient that can be used to interpolate between multiple color.\r\n */\n\n\nvar Gradient =\n/** @class */\nfunction (_super) {\n  __extends(Gradient, _super);\n\n  function Gradient() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /**\r\n   * Interpolates between two color on the gradient.\r\n   */\n\n\n  Gradient.prototype.interpolate = function (a, b, t) {\n    return a.mix(b, t);\n  };\n  /**\r\n   * Returns a solid gradient from the given color.\r\n   */\n\n\n  Gradient.solid = function (color) {\n    return new Gradient({\n      value: color,\n      time: 0.5\n    });\n  };\n  /**\r\n   * Returns a gradient with evenly spaced keys from the given colors.\r\n   */\n\n\n  Gradient.simple = function () {\n    var colors = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      colors[_i] = arguments[_i];\n    }\n\n    var step = 1 / (colors.length - 1);\n    return new (Gradient.bind.apply(Gradient, __spreadArray([void 0], colors.map(function (color, index) {\n      return {\n        value: color,\n        time: index * step\n      };\n    }))))();\n  };\n\n  return Gradient;\n}(spline_1.Spline);\n\nexports.Gradient = Gradient;","map":null,"metadata":{},"sourceType":"script"}