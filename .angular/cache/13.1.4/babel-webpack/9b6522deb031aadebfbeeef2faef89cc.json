{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getDefaultRendererOptions = void 0;\n/**\r\n * Returns the default set of renderer options.\r\n */\n\nfunction getDefaultRendererOptions() {\n  return {\n    shapeFactory: \"square\",\n    applyColor: defaultApplyColor,\n    applyOpacity: defaultApplyOpacity,\n    applyLighting: defaultApplyLighting,\n    applyTransform: defaultApplyTransform\n  };\n}\n\nexports.getDefaultRendererOptions = getDefaultRendererOptions;\n/**\r\n * Applies the specified color to the element.\r\n *\r\n * @remarks\r\n * This function is aware of the element's node type:\r\n * - `div` elements have their `background` set.\r\n * - `svg` elements have their `fill` and `color` set.\r\n * - Other elements have their `color` set.\r\n */\n\nfunction defaultApplyColor(color, element) {\n  var hex = color.toHex(); // Note that by default, HTML node names are uppercase.\n\n  switch (element.nodeName.toLowerCase()) {\n    case \"div\":\n      element.style.background = hex;\n      break;\n\n    case \"svg\":\n      element.style.fill = element.style.color = hex;\n      break;\n\n    default:\n      element.style.color = hex;\n      break;\n  }\n}\n/**\r\n * Applies the specified opacity to the element.\r\n */\n\n\nfunction defaultApplyOpacity(opacity, element) {\n  element.style.opacity = opacity.toString();\n}\n/**\r\n * Applies the specified lighting to the element as a brightness filter.\r\n *\r\n * @remarks\r\n * This function assumes an ambient light with intensity 0.5, and that the\r\n * particle should be lit from both sides. The brightness filter can exceed 1,\r\n * to give the particles a \"glossy\" feel.\r\n */\n\n\nfunction defaultApplyLighting(lighting, element) {\n  element.style.filter = \"brightness(\" + (0.5 + Math.abs(lighting)) + \")\";\n}\n/**\r\n * Applies the specified transform to the element as a 3D CSS transform.\r\n * Also takes into account the current window scroll, to make sure that particles are\r\n * rendered inside of the fixed container.\r\n */\n\n\nfunction defaultApplyTransform(particle, element) {\n  element.style.transform = // Make sure to take window scrolling into account.\n  \"translateX(\" + (particle.location.x - window.scrollX).toFixed(3) + \"px) \" + (\"translateY(\" + (particle.location.y - window.scrollY).toFixed(3) + \"px) \") + (\"translateZ(\" + particle.location.z.toFixed(3) + \"px) \") + (\"rotateX(\" + particle.rotation.x.toFixed(3) + \"deg) \") + (\"rotateY(\" + particle.rotation.y.toFixed(3) + \"deg) \") + (\"rotateZ(\" + particle.rotation.z.toFixed(3) + \"deg) \") + (\"scale(\" + particle.size.toFixed(3) + \")\");\n}","map":null,"metadata":{},"sourceType":"script"}