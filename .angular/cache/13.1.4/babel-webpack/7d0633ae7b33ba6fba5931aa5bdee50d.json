{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Scene = void 0;\n\nvar debug_1 = require(\"./debug\");\n\nvar emitter_1 = require(\"./particles/emitter\");\n\nvar renderer_1 = require(\"./particles/renderer\");\n/**\r\n * Represents a scene that contains emitters and their particles.\r\n *\r\n * Scenes are responsible for spawning and updating emitters, and\r\n * removing them once they are done.\r\n *\r\n * Scenes are not explicitely present in the DOM as an element, only\r\n * the contained particles are.\r\n */\n\n\nvar Scene =\n/** @class */\nfunction () {\n  /**\r\n   * Initializes a new scene and starts the ticking job.\r\n   */\n  function Scene() {\n    /**\r\n     * The emitters currently present in the scene.\r\n     */\n    this.emitters = [];\n    /**\r\n     * The debug instance associated with the scene.\r\n     */\n\n    this.debug = new debug_1.Debug(this);\n    /**\r\n     * The renderer associated with the scene.\r\n     */\n\n    this.renderer = new renderer_1.Renderer();\n    /**\r\n     * The ID of the currently scheduled tick.\r\n     */\n\n    this.scheduledTickId = undefined;\n    /**\r\n     * The timestamp of the last tick, used to calculate deltas.\r\n     *\r\n     * @initialValue `performance.now()` (time origin)\r\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/DOMHighResTimeStamp\r\n     */\n\n    this.lastTickTimestamp = performance.now(); // Ensure the scene context is preserved on the tick.\n\n    this.tick = this.tick.bind(this);\n    this.scheduleTick();\n  }\n  /**\r\n   * Creates and returns a new, default emitter object.\r\n   */\n\n\n  Scene.prototype.createEmitter = function (options) {\n    var emitter = new emitter_1.Emitter(options);\n    this.emitters.push(emitter);\n    return emitter;\n  };\n  /**\r\n   * Clears all emitters from the scene.\r\n   *\r\n   * @returns The number of cleared emitters.\r\n   */\n\n\n  Scene.prototype.clearEmitters = function () {\n    return this.emitters.splice(0).length;\n  };\n  /**\r\n   * Clears the particles from all emitters in the scene.\r\n   * Note that this does not remove the actual emitter objects though.\r\n   *\r\n   * @returns The number of cleared particles.\r\n   */\n\n\n  Scene.prototype.clearParticles = function () {\n    return this.emitters.reduce(function (sum, emitter) {\n      return sum + emitter.clearParticles();\n    }, 0);\n  };\n  /**\r\n   * Schedules a tick in the scene.\r\n   */\n\n\n  Scene.prototype.scheduleTick = function () {\n    this.scheduledTickId = window.requestAnimationFrame(this.tick);\n  };\n  /**\r\n   * Cancels a pending tick operation.\r\n   */\n\n\n  Scene.prototype.cancelTick = function () {\n    window.cancelAnimationFrame(this.scheduledTickId);\n  };\n  /**\r\n   * Processes a tick cycle, updating all emitters contained in the scene.\r\n   * This is handled as a JS animation frame event, hence the passed timestamp.\r\n   *\r\n   * @remarks\r\n   * The emitter ticking and particle rendering is run using try-catch blocks,\r\n   * to ensure that we can recover from potential errors.\r\n   *\r\n   * @param timestamp The current timestamp of the animation frame.\r\n   */\n\n\n  Scene.prototype.tick = function (timestamp) {\n    // Calculate the elapsed delta and convert it to seconds.\n    var delta = (timestamp - this.lastTickTimestamp) / 1000;\n\n    try {\n      // Perform ticks for all the emitters in the scene.\n      for (var i = 0; i < this.emitters.length; i++) {\n        var emitter = this.emitters[i];\n        emitter.tick(delta);\n\n        if (emitter.isExpired && emitter.canRemove) {\n          this.emitters.splice(i--, 1);\n        }\n      }\n    } catch (error) {\n      console.error(\"An error occurred while updating the scene's emitters:\\n\\\"\" + error + \"\\\"\");\n    }\n\n    try {\n      // Instruct the renderer to draw the particles of all systems.\n      this.renderer.begin();\n\n      for (var _i = 0, _a = this.emitters; _i < _a.length; _i++) {\n        var emitter = _a[_i];\n\n        for (var _b = 0, _c = emitter.particles; _b < _c.length; _b++) {\n          var particle = _c[_b];\n          this.renderer.renderParticle(particle, emitter);\n        }\n      }\n\n      this.renderer.end();\n    } catch (error) {\n      console.error(\"An error occurred while rendering the scene's particles:\\n\\\"\" + error + \"\\\"\");\n    } // Perform a tick on the debug interface\n\n\n    this.debug.tick(delta); // Save the timestamp as the last tick timestamp and schedule a new tick.\n\n    this.lastTickTimestamp = timestamp;\n    this.scheduleTick();\n  };\n\n  return Scene;\n}();\n\nexports.Scene = Scene;","map":null,"metadata":{},"sourceType":"script"}