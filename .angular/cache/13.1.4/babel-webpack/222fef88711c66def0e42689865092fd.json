{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Color = void 0;\n\nvar math_1 = require(\"../systems/math\");\n/**\r\n * Represents a color consisting of RGB values. The components of it are\r\n * represented as integers in the range 0 to 255.\r\n *\r\n * @example\r\n * ```ts\r\n * const a = new Color(12, 59, 219);\r\n * const b = Color.fromHex(\"#ffa68d\");\r\n * const result = a.mix(b);\r\n * ```\r\n */\n\n\nvar Color =\n/** @class */\nfunction () {\n  /**\r\n   * Creates a new color instance from the specified RGB components.\r\n   */\n  function Color(r, g, b) {\n    this.values = new Float32Array(3);\n    this.rgb = [r, g, b];\n  }\n\n  Object.defineProperty(Color.prototype, \"r\", {\n    /**\r\n     * Returns the r-component of the color.\r\n     */\n    get: function () {\n      return this.values[0];\n    },\n\n    /**\r\n     * Modifies the r-component of the color.\r\n     * Note that this also floors the value.\r\n     */\n    set: function (value) {\n      this.values[0] = Math.floor(value);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Color.prototype, \"g\", {\n    /**\r\n     * Returns the g-component of the color.\r\n     */\n    get: function () {\n      return this.values[1];\n    },\n\n    /**\r\n     * Modifies the g-component of the color.\r\n     * Note that this also floors the value.\r\n     */\n    set: function (value) {\n      this.values[1] = Math.floor(value);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Color.prototype, \"b\", {\n    /**\r\n     * Returns the b-component of the color.\r\n     * Note that this also floors the value.\r\n     */\n    get: function () {\n      return this.values[2];\n    },\n\n    /**\r\n     * Modifies the b-component of the color.\r\n     */\n    set: function (value) {\n      this.values[2] = Math.floor(value);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Color.prototype, \"rgb\", {\n    /**\r\n     * Returns the rgb-components of the color, bundled as a copied array.\r\n     */\n    get: function () {\n      return [this.r, this.g, this.b];\n    },\n\n    /**\r\n     * Simultaneously updates the rgb-components of the color, by passing an array.\r\n     */\n    set: function (values) {\n      this.r = values[0];\n      this.g = values[1];\n      this.b = values[2];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Mixes the two color together with an optional mixing weight.\r\n   * This weight is 0.5 by default, perfectly averaging the color.\r\n   */\n\n  Color.prototype.mix = function (color, weight) {\n    if (weight === void 0) {\n      weight = 0.5;\n    }\n\n    return new Color(math_1.lerp(this.r, color.r, weight), math_1.lerp(this.g, color.g, weight), math_1.lerp(this.b, color.b, weight));\n  };\n  /**\r\n   * Returns the hexadecimal representation of the color, prefixed by '#'.\r\n   */\n\n\n  Color.prototype.toHex = function () {\n    var hex = function (v) {\n      return v.toString(16).padStart(2, \"0\");\n    };\n\n    return \"#\" + hex(this.r) + hex(this.g) + hex(this.b);\n  };\n  /**\r\n   * Returns a formatted representation of the color.\r\n   */\n\n\n  Color.prototype.toString = function () {\n    return \"rgb(\" + this.values.join(\", \") + \")\";\n  };\n  /**\r\n   * Creates a color from the specified hexadecimal string.\r\n   * This string can optionally be prefixed by '#'.\r\n   */\n\n\n  Color.fromHex = function (hex) {\n    if (hex.startsWith(\"#\")) {\n      hex = hex.substr(1);\n    }\n\n    return new Color(parseInt(hex.substr(0, 2), 16), parseInt(hex.substr(2, 2), 16), parseInt(hex.substr(4, 2), 16));\n  };\n  /**\r\n   * Creates a color from the specified HSL components.\r\n   *\r\n   * @see https://stackoverflow.com/a/9493060/5507624\r\n   */\n\n\n  Color.fromHsl = function (h, s, l) {\n    h /= 360;\n    s /= 100;\n    l /= 100;\n\n    if (s === 0) {\n      return new Color(l, l, l);\n    } else {\n      var hue2rgb = function (p, q, t) {\n        if (t < 0) t += 1;\n        if (t > 1) t -= 1;\n        if (t < 1 / 6) return p + (q - p) * 6 * t;\n        if (t < 1 / 2) return q;\n        if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6;\n        return p;\n      };\n\n      var to255 = function (v) {\n        return Math.min(255, 256 * v);\n      };\n\n      var q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n      var p = 2 * l - q;\n      return new Color(to255(hue2rgb(p, q, h + 1 / 3)), to255(hue2rgb(p, q, h)), to255(hue2rgb(p, q, h - 1 / 3)));\n    }\n  };\n  /**\r\n   * Returns (1, 1, 1).\r\n   */\n\n\n  Color.white = new Color(255, 255, 255);\n  /**\r\n   * Returns (0, 0, 0).\r\n   */\n\n  Color.black = new Color(0, 0, 0);\n  return Color;\n}();\n\nexports.Color = Color;","map":null,"metadata":{},"sourceType":"script"}